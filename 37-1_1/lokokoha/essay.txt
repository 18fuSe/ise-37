Why did I come in IT?

Мое увлечение персональными компьютерами было довольно длинным и увлекательным путешествием что в конце концов предопределило мою судьбу в бедующей профессиональной деятельности. И так начнем …….

Зимой далекого 2005 года, компьютеризация добралась до и до нашего отдаленного города. Вернувшись с работы отец принес домой наш первый домашний компьютер который был установлен на рабочий стол буквально в считанные минуты. Характеристики данного персонального компьютера повергнут в шок неподготовленного слушателя по этой причине я не буду их озвучивать, скажу только что он был очень большой и громоздкий и имел на борту виндовс 95. Тогда данного аппарата хватило чтоб увлечь меня всего лишь на какие нить пару часов после чего он был успешно забыт и использовался лишь отцом для рабочих манипуляций. Шло время и данный компьютер совершенно распоясался, баги и вирусы буквально выскакивали из него, их можно было потрогать руками и данный компьютер был отправлен в подвал для дальнейшего хранения в течении ближайших 10 лет.

Следующие полгода прошли под эгидой «учиться учиться и еще раз учиться» как завещал великий Ленин и про компьютер не кто не вспоминал но настало лето вместе с ними и долгожданные каникулы. В один из теплых летних деньков моими родственниками было принято решения совершить тактическую вылазку к ближайшему магазину компьютерной техники где за не мыслимые по тем временам 50.000 рублей был выбран и куплен персональный компьютер который радовал нас вплоть до 2014 года, данный компьютер уже умел что то большее чем запускать паинт он уже шел на виндовс хp и спокойно тянул различные игры которые были куплены в том же магазине вместе с кучей внешнего оборудования. Среди разного что было куплено нами была и большая книга в 400 страниц которая рассказывала об устройстве персонального компьютера о том как с ним надо работать, она была проштудирована вдоль и поперек и следом за ней еще пара мелких брошюр на данную тематику. Можно сказать что с данной книги и началась моя любовь к персональному компьютеру. Шло время и в 2010 году нам пришлось переехать в другой город куда вместе с нами и перекочевал компьютер. Так как после переезда мелкому школьнику довольно сложно пройти адаптацию компьютер стал одним из главных моих увлечений на ближайший год благо мою путешествие скрашивал появившийся чуть ранее интернет который позволил мне установить первую и самую мою любимую игру по сей день это World of Warcraft. Вечера проведенные в данной игре были не забываемыми но так как к 10 году я играл в нее уже довольно долго стали появляться сообщения от членов моей гильдии о создании своего пиратского сервера так плавно я и подошел к необходимости изучения программирования и к переломному моменту моей жизни. Свое введение в программирование я начал с ядра Trinity кор когда оно только набирало популярность, изначально все сервера стояли на домашнем компьютере и доступ к ним шел только через популярную в то время программу «Хамач». Но так как большой конкуренции в плане пиратских серверов в то время не наблюдалось спрос даже на такую возможность бесплатно поиграть в заманивал большое количество игроков с разных концов мира. Через небольшой промежуток времени я уже спокойно разбирался в чужом коде и мог писать свой, создание простых сайтов и регистраций далось тоже без больших проблем и тогда настало время одного из первых крупных проектов над которыми мне удалось поработать будучи еще даже школьником.

В один день мне пришло сообщение в скайпе с предложением заняться разработкой и работой на одном из игровых миров пиратского сервера riveras сказать, что я был рад это нечего не сказать, даже не думая я согласился на данную работу так как онлайн данного сервера насчитывал в то время гигантские 5000 + человек. Мне дали возможность поработать на одном из малых риалмов но по прошествии чуть более чем полу года данный сервер был выкуплен более крупным сервером который начинал свой пусть с большого финансового спонсирования это WOWCIRCLE после этого большинство энтузиастов разработчиков было уволено так как они не имели желания работать с мало известным им и не совершеннолетним персоналом (

Таким образом я снова попал в свободное плаванье но уже тогда я понял, что создание игр и разработка контента который приносит и мне и другим людям столько радости это мое. Не описать восторга разработчика когда ты можешь повторить создание своих кумиров) а твоих игроков от реализации какого-либо контента стоит еще дороже с этого момента настал период когда языки программирования новые наработки стали поглощаться мной в гигантских объемах. Попав в свободное плаванье я не бросил дело и продолжал реализацию на благо других проектов. В конечном итоге после не долгого скитания я смог найти один из лучших коллективов в пиратских серверах это людей которые решили основать  [uwow.biz](https://uwow.biz/) данных сервер стал моим домом на долгие года да и до сих пор я продолжаю заниматься разработкой для него. 

И так заканчивая свой рассказ – компьютерную биографию я могу сказать, что я нашел то чем я хочу заниматься возможно всю свою жизнь ведь радость от реализации конечного программного продукта сравнима возможно только с прыжком на парашюте (Я не пробывал!) надеюсь хоть один человек дочитал данный текст до победного конца).
FULL-STACK DEVELOPER
Have you ever heard the term “the whole enchilada?” Full-stack developers can see projects through from start (prototyping, planning) to middle (designing, building) to finish (deploying, managing). Tasks: Covering the full-stack as a developer means building and managing platforms and working across teams to create projects, code projects, and manage databases. Skills: Anything!! Git + GitHub, HTML, CSS, SASS, JavaScript, Java, MySQL, Ruby, Python, Responsive Web Design, jQuery, frameworks, PHP, Apache
Термин full stack описывает разработчика, который одинаково хорошо справляется с написанием фронт-энда и бэк-энда.

Чтобы быть более конкретным, это означает, что разработчик может работать с базами данных, PHP, HTML, CSS, JavaScript, а так же может превратить Photoshop-ый макет в готовый к использованию шаблон.

Full stack разработчику не нужно быть супер профессионалом во всех областях и технологиях, в которых он должен работать, потому что это практически невозможно. Он просто должен уметь работать с этими технологиями.
Плюсы
Вы можете выбирать, кем работать дальше
Вам гораздо проще сменить ориентацию (простите за двусмысленность), чем обычному разработчику. Вы видите многое в применении, можете разобраться и понять, что вас интересует. Да, вам придётся потратить время на углубление — но это будет потраченное с пользой время. Да, вам скорее всего придётся завести несколько пет проджектов, чтобы попробовать всё, что хочется. Но это опять же окупается сторицей
Вы меньше выгораете
Если есть возможность периодически менять проекты, то вы гораздо меньше устаёте от применения одного и того же. Конечно, если вы не хардкорный фанат и не получаете удовольствие просто от того, что пишете всё, скажем, на vanilla C или asm.
Вам проще расти в тимлида или архитектора
Довольно очевидный плюс — чем больше вы разбираетесь в общей структуре, тем больше у вас шансов на рост в руководителя. Конечно, при наличии желания и коммуникативных навыков.

Вы можете отдебажить всё, что угодно
Очевидный плюс. Ваше системное мышление достигло уровня, на котором вы можете исправить что угодно и где угодно.

Работать веселее, интереснее и познавательнее
За один день вы можете получить много новых навыков и знаний в абсолютно разных вещах.

В одиночку вы можете создавать чудесные вещи на стыке разных технологий
Вы один можете сделать то, на что при стандартном подходе требуется 3-4 человека. Запрограммировать микроконтроллер для интернета вещей, который общается с веб сервером, пишет в базу данных, и данные с которого можно просматривать на веб сайте, в приложении или на мобильном устройстве? Легко! Вы один можете представить всю систему и реализовать её без согласований, недопониманий и проволочек.

Ваши решения работают быстрее и надёжнее
За счёт понимания взаимодействия различных систем, вы можете выбрать лучше пути для их комбинирования. Вы лучше понимаете каждый компонент и не боитесь его использовать. Как пример — возьмём “кляудные технологии” (мопед не мой, в публикациях проскакивало). В общем и целом, облако это чудесный способ решения огромного количества задач, в том числе задач масштабирования. К сожалению, всё чаще вижу, что облачные решения используются просто потому, что разработчик не умеет и боится решить свою задачу как-то ещё, а представляет это в виде дополнительного плюса. А многое можно сделать гораздо дешевле и лучше, если иметь хотя бы поверхностное понимание вопроса.
Вы можете пользоваться почти любыми исходниками
В мире, где решена уже практическая любая прикладная задача, тратить время на то, чтобы написать ещё один велосипед — просто преступление по отношению к длительности своей жизни. Теперь вы можете взять любой репозиторий на любом языке и воспользоваться им как отправной точкой для своего решения. Вы пролетите свежим бризом над граблями, которые до вас собрали тысячи других разработчиков.
Здесь должна была быть картинка, на которой показано, как просветлённый программист в позе Лотоса медленно возносится над горами Тибета, а вокруг него танцуют, обнимаются и водят хоровод языки программирования и различные технологии в образе очаровательных девушек — но увы, такой картинки почему-то не нашёл. Пожалуйста, представьте это сами.