Графический язык Дракон
     Дружелюбный русский алгоритмический язык, который обеспечивает наглядность (сокр. ДРАКОН) — визуальный алгоритмический язык программирования и моделирования (см. также: UML).
     Язык построен за счёт формализации и эргономизации блок-схем алгоритмов, описанных в ГОСТ 19.701-90 и ISO 5807-85.
     Язык может быть использован для разработки программ реального времени.
     Правила языка ДРАКОН по созданию диаграмм разрабатывались с учётом требований эргономики, то есть изначально оптимизированы для восприятия алгоритмов человеком с использованием технологий компьютерной графики. При этом, данный язык рассчитан на создание программ, которые можно было бы просматривать как модели, содержащие код на текстовом языке.
     Возможности языка ДРАКОН могут расширяться в зависимости от нужд пользователя: на языке ДРАКОН можно писать программы для ЭВМ за счет включения в себя функционала и синтаксиса поддерживаемого ИС ДРАКОН или DRAKON Editor текстового языка программирования; при этом программа для ЭВМ, написанная таким образом, считается написанной на гибридном языке ДРАКОН- [название языка].
     Вышеописанный подход повышает эргономику, особенно в ситуации, когда программа пишется продолжительное время и/или коллективно (например, с поддерживается с помощью GIT), создавая обстановку, позволяющую писать программу, имея в процессе её написания её же модель, которая облегчает возможность ориентироваться внутри исходного кода.
     Аналоги ДРАКОНА и его составных частей
     Близким аналогом семейства языков ДРАКОН является «R-технология производства программ, или технология двумерного программирования», созданная в Институте кибернетики имени В. М. Глушкова, причём графика дракон-схем в ДРАКОН-семействе служит аналогом графики Р-схем в R-технологии. В технологическом комплексе программиста RТК принцип обработки информации в компьютере подразумевает деление на R-машину, R-язык и R-технологию. ДРАКОН использует тот же принцип, выраженный с помощью другого понятийного аппарата.
     Аналогом дракон-схем (как алгоритмического языка моделирования) являются диаграммы поведения языка UML: диаграмма деятельности (activity diagram), диаграмма состояний (UML state machine) и некоторые диаграммы взаимодействия, например, диаграмма синхронизации (timing diagram).
     Более фундаментальными аналогами дракон-схем являются собственно блок-схема, диаграмма Насси-Шнейдермана, псевдокод (язык описания алгоритмов) и др.
     Философия языка 
     Основной задачей разработчиков было создание единого универсального языка программирования и моделирования, который своей доступностью и мощностью способен заменить специализированные языки (как-то ПРОЛ2 (для разработки бортовых комплексных программ Бурана), ДИПОЛЬ (для создания наземных программ Бурана) и ЛАКС (для моделирования)).
     На втором этапе разработки была предложена концепция гибридных языков программирования. В рамках этой концепции созданы инструментальные средства языка ДРАКОН для гражданских нужд широкого применения в несекретном варианте. Так появилась интегрированная среда разработки алгоритмов и программ под названием «ИС Дракон».
     Гибридизация ДРАКОН с другими языками программирования
     ДРАКОН — не один язык, а целое семейство, которое может включать теоретически неограниченное число ДРАКОН-языков, на практике имеющее большое количество таковых. Все языки ДРАКОН-семейства имеют одинаковый графический синтаксис, что обеспечивает зрительное сходство дракон-схем различных ДРАКОН-языков, визуально отделяя код на ДРАКОНе и не на нём. Каждый язык семейства отличается тем, что имеет свой собственный текстовый синтаксис (то есть, использует синтаксис совместимого текстового языка программирования).
     Строгое разграничение графического и текстового синтаксиса позволяет в максимальной степени расширить сферу применения языков семейства, обеспечивая гибкость и универсальность выразительных средств языка: текстовые скрипты, уже созданные на совместимом текстовом языке программирования не зависят от действий, совершаемых программированием на визуальном ДРАКОНЕ. При этом единообразие правил графического синтаксиса семейства ДРАКОН-языков обеспечивает их концептуальное единство. Разнообразие текстовых правил (то есть возможность выбора любого текстового синтаксиса), в свою очередь, определяет гибкость языка и лёгкую настройку на различные предметные и иные области.
     Язык программирования D
          D – язык объектно-ориентированного мультипарадигменного системного
          программирования, разработанный Уолтером Брайтом из Digital Mars. Его разработка началась в 1999 году и была впервые выпущена в 2001 году. Первая мажорная версия D (1.0) была выпущена в 2007 году. В настоящее время у нас есть версия D2 языка D.
          D – язык с C-подобным синтаксисом, который использует статическую типизацию. В D присутсвует множество особенностей C и C++, но, тем не менее, некоторые возможности этих языков не входят в D. Вот некоторые из наиболее заметных дополнений D, отсутствующих в С/С++:
          •Unit-тестирование
          •True modules
          •Сборка мусора
          •First class arrays
          •Свободный и открытый
          •Ассоциативные массивы
          •Динамические массивы
          •Внутренние классы
          •Замыкания
          •Анонимные функции
          •Ленивые вычисления
          D – мультипарадигменный язык программирования. В D возможно использовать следующие парадигмы: 
          •Императивная 
          •Объектно-ориентированная 
          •Мета-программирование 
          •Функциональная 
          •Параллельная
          Программирование на D имеет некоторые интересные особенности, а официальный
          сайт языка D утверждает, что D является удобным, мощным и эффективным. В ядро языка D добавлено множество возможностей, которые язык C предоставляет в виде стандартных библиотек, такие как массив с изменяемым размером или строки. D является отличным вторым языком для программистов среднего и продвинутого уровня. В D лучше подход к использованию памяти и управлению указателями, которые часто вызывают проблемы на C++.
          Язык D предназначен в основном для новых программ, и преобразования существующих программ. Он предоставляет встроенное тестирование и верификацию кода, что идеально для нового крупного проекта, в котором большие команды напишут миллионы строк кода.
