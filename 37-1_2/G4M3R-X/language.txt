Delphi, что это?
Delphi — это императивный структурированный объектно-ориентированный язык программирования со строгой статической типизацией переменных. 
А теперь уточним:
Императивный значит, чтостиль написания кода выглядит как приказы, состоящие из последовательности команд, которые должен выполнить компьютер;
Структурированныйзначит, что в её основе лежит иерархическая структуры блоков;
Объектно-ориентированныйзначит, что она основана на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определённого класса, которые образуют иерархию наследования;
Ну а строгая статическая типизация переменной, означает что её типзадается в момент инициализации (объявления) и уже не может быть изменён позже.
Ранее этот язык программирования имел название ObjectPascal, которое относилось к несколько другому языку, разработанном в фирме Apple в 1986 году группой Ларри Теслера. Однако в настоящее время термин ObjectPascal чаще всего употребляется для обозначения языка среды программирования Delphi. Начиная с Delphi 7 в официальных документах компания Borland имя Delphi стало использовать название для обозначения языка, ранее известного как ObjectPascal.
Основная область использования - написание прикладного программного обеспечения. Т.е. предназначена для выполнения определённых задач и рассчитана на непосредственное взаимодействие с пользователем.
Целевая платформа
Изначально среда разработки Delphi была предназначена исключительно для разработки приложений Microsoft Windows, затем был реализован вариант для платформ Linux (под торговой маркой Kylix), однако после выпуска в 2002 году Kylix 3 его разработка была прекращена, и вскоре было объявлено о поддержке Microsoft .NET, которая, в свою очередь, была прекращена с выходом Delphi 2007.
В настоящее время, наряду с поддержкой разработки 32 и 64-разрядных программ для Windows, реализована возможность создавать приложения для Apple Mac OS X, iOS, Google Android, а также Linux Server x64.
Независимая, сторонняя реализация среды разработки проектом Lazarus (FreePascal, в случае компиляции в режиме совместимости с Delphi) позволяет использовать его для создания приложений на Delphi для таких платформ, как Linux, Mac OS X и Windows CE.
Также предпринимались попытки использования языка в проектах GNU (например, Notepad GNU) и написания компилятора для GCC (GNU Pascal).
Философия и отличия от популярных прикладных языков программирования
При создании языка не ставилась задача обеспечить максимальную производительность исполняемого кода или лаконичность исходного кода для экономии оперативной памяти. Изначально, язык ставил во главу угла стройность и высокую читаемость, поскольку был предназначен для обучения дисциплине программирования. Эта изначальная стройность, в дальнейшем, как по мере роста аппаратных мощностей, так и в результате появления новых парадигм, упростила расширение языка новыми конструкциями.
Так, сложность объектного C++, по сравнению с C, выросла весьма существенно и затруднила его изучение в качестве первого языка программирования, чего нельзя сказать об ObjectPascal относительно Pascal.
Краткая История
ObjectPascal — результат развития языка Турбо Паскаль, который, в свою очередь, развился из языка Паскаль. Паскаль был полностью процедурным языком, Турбо Паскаль, начиная с версии 5.5, добавил в Паскаль объектно-ориентированные свойства, а в ObjectPascal — динамическую идентификацию типа данных с возможностью доступа к метаданным классов (то есть к описанию классов и их членов) в компилируемом коде, также называемую интроспекцией — данная технология получила обозначение RTTI. Так как все классы наследуют функции базового класса TObject, то любой указатель на объект можно преобразовать к нему, после чего воспользоваться методом ClassType и функцией TypeInfo, которые и обеспечат интроспекцию.
Также отличительным свойством ObjectPascal от С++ является то, что объекты по умолчанию располагаются в динамической памяти. Однако можно переопределить виртуальные методы NewInstance и FreeInstance класса TObject. Таким образом, абсолютно любой класс может осуществить так сказать «желание» «где хочу — там и буду лежать». Соответственно организуется и «многокучность».
